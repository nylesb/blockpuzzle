(defun blockpuzzle (input)
  "Implements solution to the blokpuzzle for Greedy, Uniform cost & A* search"
  (let* ((open ())
         (closed ())
         (puzzle input)
         (blank-pos (dotimes (i (length input)) ; Index of position of blank tile
                      (if (equal (nth i input) 'O)
                        (return i))))
         (goal (let ((white 0)
                     (black 0))
                 (dolist (tile puzzle)
                   (cond ((equal tile 'W) (setf white (+ white 1)))
                         ((equal tile 'B) (setf black (+ black 1)))))
                 (append (make-list white :initial-element 'W)
                         (make-list black :initial-element 'B)))))
    (labels ((h (state)
               "Heuristic. Determines 'badness' by looking at how many black
               tiles are left of white tiles, counted for each white tile."
               (let ((inversions 0))
                 (dotimes (i (length state))
                   (if (equal (nth i state) 'W)
                       (dotimes (j i)
                         (if (equal (nth j state) 'B)
                             (setf inversions (+ inversions 1))))))
                 (return-from h inversions)))
             (swap-blank (relative-position &key h)
               "Swaps blank with the tile at the relative-position to blank."
               (setf (nth blank-pos puzzle)
                     (nth (+ blank-pos relative-position) puzzle))
               (setf blank-pos (+ blank-pos relative-position))
               (setf (nth blank-pos puzzle) 'O)
               (when (equal h t)
                 (let ((value 0)))
                   (setf value (h puzzle))
                   (swap-blank (- relative-position))
                   (return-from swap-blank value)))
             (greedy ()
               "Solves the puzzle using Greedy method."
               (if (= (h puzzle) 0) (return-from greedy nil))
               ;; Cover edge cases
               (cond ((= blank-pos 0) (setf open '(1 2 3)))
                     ((= blank-pos 1) (setf open '(-1 1 2 3)))
                     ((= blank-pos 2) (setf open '(-2 1 2 3)))
                     ((= blank-pos (- (length puzzle) 1)) (setf open '(-3 -2 -1)))
                     ((= blank-pos (- (length puzzle) 2)) (setf open '(-3 -2 -1 1)))
                     ((= blank-pos (- (length puzzle) 3)) (setf open '(-3 -2 -1 1 2)))
                     (t (setf open '(-3 -2 -1 1 2 3))))
               ;; Look for the best choice for next node                  
               (let* ((best-choice -3)
                      (best-h (swap-blank best-choice :h t)))
                 (dolist (i open)
                   (when (< (swap-blank i :h t) best-h)
                     (setf best-choice i)
                     (setf best-h (swap-blank best-choice :h t))))
                 (swap-blank best-choice))))
      (print (greedy))
      (print puzzle))))